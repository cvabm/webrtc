name: AppRTCMobile
env:
    TZ: Asia/Shanghai

on:
  push:
    branches:
      - hack_dev
      - "feature/*"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - hack_dev
      - "feature/*"

jobs:
  build:
    runs-on: ubuntu-latest
#     container:
#      image: python:2.7.18-buster
    steps:
    - name: build
      run: |
        python --version
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
    - name: init custom env
      run: |
        BUILD_NAME="AppRTCMobile"
        BUILD_VERSION="$(date +'%Y%m%d%H%M%S')"
        BUILD_NAME_WITH_VERSION="$BUILD_NAME-$BUILD_VERSION"
        echo BUILD_NAME="$BUILD_NAME" >> .custom_env
        echo BUILD_VERSION="$BUILD_VERSION" >> .custom_env
        echo BUILD_NAME_WITH_VERSION="$BUILD_NAME_WITH_VERSION" >> .custom_env
        cat .custom_env
        cat .custom_env >> $GITHUB_ENV
        git config --global user.name "$GITHUB_ACTOR"
        git config --global user.email "ignore@examble.com"
        python --version
    - name: build
      run: |
        sudo apt install python2.7
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
        sudo update-alternatives --config python
        sudo apt install ninja-build
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        cd depot_tools
        git checkout -b dev 872ac9bd3d35f171a543731bfac1c8597518184e
        cd ..
        export DEPOT_TOOLS_DIR=$PWD/depot_tools
        PATH=$DEPOT_TOOLS_DIR:$DEPOT_TOOLS_DIR/python2-bin:$PATH
        python --version
        git clone --depth=1 "https://github.com/$GITHUB_REPOSITORY.git" src
        gclient config --name=src --unmanaged "https://github.com/$GITHUB_REPOSITORY.git"
        echo 'target_os = ["android", "unix"]' >> .gclient
        gclient sync
        cd src
        
        gn gen out/Release-arm-v7a --args='target_os="android" target_cpu="arm" is_debug=false rtc_include_tests=false rtc_build_examples=false'
        ninja -C out/Release-arm-v7a
        gn gen out/Release-arm-v8a --args='target_os="android" target_cpu="arm64" is_debug=false rtc_include_tests=false rtc_build_examples=false'
        ninja -C out/Release-arm-v8a
        mv out/Release-arm-v7a/libjingle_peerconnection_so.so out/Release-arm-v7a/libjingle_peerconnection_so-v7.so
        mv out/Release-arm-v8a/libjingle_peerconnection_so.so out/Release-arm-v7a/libjingle_peerconnection_so-v8.so
        mv out/Release-arm-v7a/lib.java/sdk/android/libwebrtc.jar out/Release-arm-v7a/lib.java/sdk/android/libwebrtc-v7.jar
        mv out/Release-arm-v8a/lib.java/sdk/android/libwebrtc.jar out/Release-arm-v7a/lib.java/sdk/android/libwebrtc-v8.jar
        echo "ljg5"
        ls out/Release-arm-v7a/
        echo "ljg6"
        zip -r webrtc.zip ./out/Release-arm-v7a
        ls
        echo "Current Path: $PWD"
        echo "ljg7"
    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.BUILD_VERSION }}
        release_name: ${{ env.BUILD_VERSION }}
        body: ${{ github.event.commits[0].message }}
        draft: true
        prerelease: false
    - name: Upload Asset to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src/webrtc.zip
        asset_name: webrtc.zip
        asset_content_type: application/zip

    

